public class Solution {
    // TC => O(n^2)
    // SC => O(n)
    int[] colors;
    int color;
    public int MinMalwareSpread(int[][] graph, int[] initial) {
        if(graph == null || graph.Length == 0){
            return 0;
        }

        int n = graph.Length;
        colors = new int[n];
        Array.Fill(colors, -1);
        color = 0;

        for(int i = 0; i< n; i++){
            if(colors[i] == -1){
                Dfs(graph, i);
                color++;
            }
        }

        int[] groups = new int[color];
        for(int i = 0; i < n; i++){
            int index = colors[i];
            groups[index]++;
        }

        int[] totalInfected = new int[color];
        for(int i = 0; i < initial.Length; i++){
            int index = colors[initial[i]];
            totalInfected[index]++;
        }

        int answer = -1;
        for(int i = 0; i < initial.Length; i++){
            int group = colors[initial[i]];
            if(totalInfected[group] == 1){
                if(answer == -1){
                    answer = initial[i];
                }
                else if(groups[group] > groups[colors[answer]]){
                    answer = initial[i];
                }
                else if(groups[group] == groups[colors[answer]] && answer > initial[i]){
                    answer = initial[i];
                }
            }
        }

        if(answer == -1){
            int min = Int32.MaxValue;
            for(int i = 0; i < initial.Length; i++){
                min = Math.Min(min, initial[i]);
            }
            answer = min;
        }

        return answer;
    }

    public void Dfs(int[][] graph, int u){
        if(colors[u] != -1){
            return;
        }
        colors[u] = color;
        for(int i = 0; i < graph.Length; i++){
            if(graph[u][i] == 1){
                Dfs(graph, i);
            }
        }
    }
}